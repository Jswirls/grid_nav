#!/usr/bin/env python3

import rospy 
from sensor_msgs.msg import Image 
from cv_bridge import CvBridge, CvBridgeError 
import cv2 
import numpy as np

bridge_object = CvBridge() # create the cv_bridge object 
image_received = 0 #Flag to indicate that we have already received an image 
cv_image = 0 #This is just to create the global variable cv_image

def show_image():
    image_sub = rospy.Subscriber("camera1/image_raw",Image,camera_callback) 
    r = rospy.Rate(1) #10Hz  
    while not rospy.is_shutdown():  
        if image_received: 
            cv2.waitKey(1) 
            r.sleep()  
    cv2.destroyAllWindows()

def camera_callback(data):
    image_pub = rospy.Publisher("image_mask",Image, queue_size=1)  
    global bridge_object 
    global cv_image 
    global image_received 
    image_received=1 
    try: 
        #print("received ROS image, I will convert it to opencv") 
        # We select bgr8 because its the OpenCV encoding by default 
        cv_image = bridge_object.imgmsg_to_cv2(data, desired_encoding="bgr8") 
        #Add your code to save the image here: 
        #Save the image "img" in the current path  
        hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)

    # lower bound and upper bound for Green color
        lower_bound = np.array([20, 100, 100])	 
        upper_bound = np.array([30, 255, 255])

        # find the colors within the boundaries
        mask = cv2.inRange(hsv, lower_bound, upper_bound)

        #cv2.imwrite('robot_image.jpg', cv_image)
        cv2.imwrite('mask2.jpg', mask)            
        ## Calling the processing function
        cv2.imshow('Masked Image from robot camera', mask)
        rospy.loginfo(np.where(mask[:][1640] >0))
        a = bridge_object.cv2_to_imgmsg(mask, "8UC1")
        image_pub.publish(a)
         
    except CvBridgeError as e: 
        print(e)
if __name__ == '__main__': 
    rospy.init_node('load_image', anonymous=True) 
    show_image()