#!/usr/bin/env python3

import rospy
import numpy as np
from nav_msgs.msg import Odometry
from grid_nav.msg import GridErr
from tf.transformations import euler_from_quaternion
from math import pi
from sensor_msgs.msg import Image 
from cv_bridge import CvBridge, CvBridgeError 
import cv2 

GRID_SIZE = 0.5
#.251
#.105
#.-145
class GridLocate:

    def __init__(self):
        self.front_white = None
        rospy.init_node('locate_sim')
        self.image_sub = rospy.Subscriber("camera1/image_raw",Image,self.camera_callback) 
        self._odom_sub = rospy.Subscriber('odom', Odometry, self.odom_callback)
        self._err_pub = rospy.Publisher('grid_err', GridErr, queue_size=1) 
        rospy.sleep(10)
        rospy.spin()

    def odom_callback(self, msg):

        #pos = msg.pose.pose.position
        quat = msg.pose.pose.orientation
        eul = euler_from_quaternion([quat.x, quat.y, quat.z, quat.w])
        rot = eul[2]
        # 0 is pos x
        # pi is neg x
        # pi/2 is pos y
        # round to nearest dir
        # z_rot_scale = z_rot / np.pi * 2
        # heading_dir = np.rint(z_rot_scale)
        # print(heading_dir)
        # print(f'{x_err:.3} {y_err:.3}')
        while(self.front_white == None):
            rospy.sleep(0.1)
        err = GridErr(0,self.front_white)
        # pos forward, neg backward
        # pos right, neg left
        # pos for ccw, neg for cw

        if -pi/4 < rot <= pi/4:
            err.rotation = rot
        elif pi/4 < rot <= 3*pi/4:
            err.rotation = rot - pi/2
        elif rot > 3*pi/4 or rot <= -3*pi/4:
            err.rotation = (rot % (2*pi)) - pi
        elif -3*pi/4 < rot <= -pi/4:
            err.rotation = rot + pi/2
        else:
            raise RuntimeError("math wrong")

        self._err_pub.publish(err)

    def camera_callback(self, data):
        self.bridge_object = CvBridge() # create the cv_bridge object
        try: 
            # We select bgr8 because its the OpenCV encoding by default 
            cv_image = self.bridge_object.imgmsg_to_cv2(data, desired_encoding="bgr8") 
            #Add your code to save the image here: 
            #Save the image "img" in the current path  
            hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)

            # lower bound and upper bound for Yellow color
            lower_bound = np.array([20, 100, 100])	 
            upper_bound = np.array([30, 255, 255])

            # find the colors within the boundaries
            mask = cv2.inRange(hsv, lower_bound, upper_bound)
            if np.any(mask[:][1640] > 0):
                print('True')
                self.front_white = True
            else:
                print('False')
                self.front_white = False
            cv2.imwrite('mask3.jpg', mask)
            cv2.imshow('Masked Image from robot camera', mask)
         
        except CvBridgeError as e: 
            print(e)

if __name__ == '__main__':
    try:
        GridLocate()
    except rospy.ROSInterruptException:
        pass